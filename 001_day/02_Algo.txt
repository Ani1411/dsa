ALGORITHM
An Algorithm is a set of well-defined instructions to solve particular problem.
It takes a set of inputs and produces a desired output.

for e.g:
    Problem: How to Add two numbers?
    1. Take two number as input.
    2. Add them using + operator.
    3. Display the result.


Qualities of a Good Algorithm
a. Input and Output should be defined precisely.
b. Each step in the algorithm should be clear and unambiguous.
c. Algorithms should be most effective among many different ways to solve a problem.
d. An algorithm shouldn't include computer code. Instead, the algorithm should be written in such a way that it can be used in different programming languages.


Some Examples of Algorithm:

Algorithm 1: Add two numbers entered by the user. ( 001.py LN: 1)
Step-1: Start
Step-2: Declare variables num1, num2 and sum
Step-3: Take input to num1 and num2
Step-4: Add num1 and num2 and assign the result to sum
Step-5: Display sum
Step-6: End

Algorithm 2: Find the largest number among three numbers. ( 001.py LN: 15)
Step 1: Start
Step 2: Declare variables a,b and c.
Step 3: Read variables a,b and c.
Step 4: If a > b
           If a > c
              Display a is the largest number.
           Else
              Display c is the largest number.
        Else
           If b > c
              Display b is the largest number.
           Else
              Display c is the greatest number.
Step 5: Stop


Algorithm 3: Find Roots of a Quadratic Equation ax2 + bx + c = 0. ( 001.py LN: 27)
Step 1: Start
Step 2: Declare variables a, b, c, D, x1, x2, rp and ip;
Step 3: Calculate discriminant
         D ← b2-4ac
Step 4: If D ≥ 0
              r1 ← (-b+√D)/2a
              r2 ← (-b-√D)/2a
              Display r1 and r2 as roots.
        Else
              Calculate real part and imaginary part
              rp ← -b/2a
              ip ← √(-D)/2a
              Display rp+j(ip) and rp-j(ip) as roots
Step 5: Stop


Algorithm 4: Find the factorial of a number. ( 001.py LN: 46)
Step 1: Start
Step 2: Declare variables n, factorial and i.
Step 3: Initialize variables
          factorial ← 1
          i ← 1
Step 4: Read value of n
Step 5: Repeat the steps until i = n
     5.1: factorial ← factorial*i
     5.2: i ← i+1
Step 6: Display factorial
Step 7: Stop


Algorithm 5: Check whether a number is prime or not. ( 001.py LN: 58)
Step 1: Start
Step 2: Declare variables n, i, flag.
Step 3: Initialize variables
        flag ← 1
        i ← 2
Step 4: Read n from the user.
Step 5: Repeat the steps until i=(n/2)
     5.1 If remainder of n÷i equals 0
            flag ← 0
            Go to step 6
     5.2 i ← i+1
Step 6: If flag = 0
           Display n is not prime
        else
           Display n is prime
Step 7: Stop



Algorithm 6: Find the Fibonacci series till the term less than 1000. ( 001.py LN: 71)
Step 1: Start
Step 2: Declare variables first_term,second_term and temp.
Step 3: Initialize variables first_term ← 0 second_term ← 1
Step 4: Display first_term and second_term
Step 5: Repeat the steps until second_term ≤ 1000
     5.1: temp ← second_term
     5.2: second_term ← second_term + first_term
     5.3: first_term ← temp
     5.4: Display second_term
Step 6: Stop
